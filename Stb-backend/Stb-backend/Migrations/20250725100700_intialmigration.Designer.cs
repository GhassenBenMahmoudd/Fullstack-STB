// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using stb_backend.Data;

#nullable disable

namespace stb_backend.Migrations
{
    [DbContext(typeof(StbDbContext))]
    [Migration("20250725100700_intialmigration")]
    partial class intialmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("stb_backend.Domain.DeclarationCadeaux", b =>
                {
                    b.Property<long>("IdCadeaux")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCadeaux"));

                    b.Property<bool>("Anonyme")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateDeclaration")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateReceptionCadeaux")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("GUID")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Honneur")
                        .HasColumnType("bit");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("IdentiteDonneur")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Occasion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeRelation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("ValeurEstime")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdCadeaux");

                    b.HasIndex("IdUser");

                    b.ToTable("DeclarationsCadeaux");
                });

            modelBuilder.Entity("stb_backend.Domain.DeclarationCorruption", b =>
                {
                    b.Property<long>("IdCorruption")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdCorruption"));

                    b.Property<bool>("Anonyme")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateObservation")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("EntitesConcernees")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("ObjetSignalement")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeDomaine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdCorruption");

                    b.HasIndex("IdUser");

                    b.ToTable("DeclarationsCorruption");
                });

            modelBuilder.Entity("stb_backend.Domain.DemandeConseil", b =>
                {
                    b.Property<long>("IdConseil")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdConseil"));

                    b.Property<bool>("Anonyme")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateDemande")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("IdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Objet")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdConseil");

                    b.HasIndex("IdUser");

                    b.ToTable("DemandesConseil");
                });

            modelBuilder.Entity("stb_backend.Domain.DocumentFile", b =>
                {
                    b.Property<long>("IdFile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdFile"));

                    b.Property<DateTime>("DateUpload")
                        .HasColumnType("datetime2");

                    b.Property<long?>("DeclarationCorruptionIdCorruption")
                        .HasColumnType("bigint");

                    b.Property<long?>("DemandeConseilIdConseil")
                        .HasColumnType("bigint");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<long?>("IdCadeaux")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdConseil")
                        .HasColumnType("bigint");

                    b.Property<long?>("IdCorruption")
                        .HasColumnType("bigint");

                    b.HasKey("IdFile");

                    b.HasIndex("DeclarationCorruptionIdCorruption");

                    b.HasIndex("DemandeConseilIdConseil");

                    b.HasIndex("IdCadeaux");

                    b.HasIndex("IdConseil");

                    b.HasIndex("IdCorruption");

                    b.ToTable("DocumentFile");
                });

            modelBuilder.Entity("stb_backend.Domain.Employe", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long?>("ManagerIdUser")
                        .HasColumnType("bigint");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUser");

                    b.HasIndex("ManagerIdUser");

                    b.ToTable("Employes");
                });

            modelBuilder.Entity("stb_backend.Domain.Manager", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Matricule")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUser");

                    b.ToTable("Managers");
                });

            modelBuilder.Entity("stb_backend.Domain.User", b =>
                {
                    b.Property<long>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NumeroTelephone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("IdUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("stb_backend.Domain.DeclarationCadeaux", b =>
                {
                    b.HasOne("stb_backend.Domain.Employe", "Employe")
                        .WithMany("DeclarationsCadeaux")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("stb_backend.Domain.DeclarationCorruption", b =>
                {
                    b.HasOne("stb_backend.Domain.Employe", "Employe")
                        .WithMany("DeclarationsCorruption")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("stb_backend.Domain.DemandeConseil", b =>
                {
                    b.HasOne("stb_backend.Domain.Employe", "Employe")
                        .WithMany("DemandesConseil")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employe");
                });

            modelBuilder.Entity("stb_backend.Domain.DocumentFile", b =>
                {
                    b.HasOne("stb_backend.Domain.DeclarationCorruption", null)
                        .WithMany("DocumentFiles")
                        .HasForeignKey("DeclarationCorruptionIdCorruption");

                    b.HasOne("stb_backend.Domain.DemandeConseil", null)
                        .WithMany("DocumentFiles")
                        .HasForeignKey("DemandeConseilIdConseil");

                    b.HasOne("stb_backend.Domain.DeclarationCadeaux", "DeclarationCadeaux")
                        .WithMany("DocumentFiles")
                        .HasForeignKey("IdCadeaux")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("stb_backend.Domain.DemandeConseil", "DemandeConseil")
                        .WithMany()
                        .HasForeignKey("IdConseil");

                    b.HasOne("stb_backend.Domain.DeclarationCorruption", "DeclarationCorruption")
                        .WithMany()
                        .HasForeignKey("IdCorruption");

                    b.Navigation("DeclarationCadeaux");

                    b.Navigation("DeclarationCorruption");

                    b.Navigation("DemandeConseil");
                });

            modelBuilder.Entity("stb_backend.Domain.Employe", b =>
                {
                    b.HasOne("stb_backend.Domain.Manager", null)
                        .WithMany("EquipeSupervise")
                        .HasForeignKey("ManagerIdUser");
                });

            modelBuilder.Entity("stb_backend.Domain.DeclarationCadeaux", b =>
                {
                    b.Navigation("DocumentFiles");
                });

            modelBuilder.Entity("stb_backend.Domain.DeclarationCorruption", b =>
                {
                    b.Navigation("DocumentFiles");
                });

            modelBuilder.Entity("stb_backend.Domain.DemandeConseil", b =>
                {
                    b.Navigation("DocumentFiles");
                });

            modelBuilder.Entity("stb_backend.Domain.Employe", b =>
                {
                    b.Navigation("DeclarationsCadeaux");

                    b.Navigation("DeclarationsCorruption");

                    b.Navigation("DemandesConseil");
                });

            modelBuilder.Entity("stb_backend.Domain.Manager", b =>
                {
                    b.Navigation("EquipeSupervise");
                });
#pragma warning restore 612, 618
        }
    }
}
